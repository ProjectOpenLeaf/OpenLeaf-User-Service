plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
    id 'org.sonarqube' version '5.1.0.4882'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    // Exclude files that don't need coverage
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/config/**',
                    '**/dto/**',
                    '**/entity/**',
                    '**/exception/**',
                    '**/*Application.class'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70  // 70% overall coverage
            }
        }
    }
}

// SonarQube Configuration
sonar {
    properties {
        property 'sonar.projectKey', 'ProjectOpenLeaf_OpenLeaf-User-Service'  // Change per service
        property 'sonar.projectName', 'OpenLeaf User Service'  // Change per service
        property 'sonar.organization', 'projectopenleaf'  // Your SonarCloud org
        property 'sonar.host.url', 'https://sonarcloud.io'

        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java'
        property 'sonar.java.binaries', 'build/classes/java/main'

        property 'sonar.coverage.jacoco.xmlReportPaths', "$buildDir/reports/jacoco/test/jacocoTestReport.xml"

        property 'sonar.exclusions', '**/config/**, **/dto/**, **/entity/**, **/exception/**, **/*Application.java'
        property 'sonar.coverage.exclusions', '**/config/**, **/dto/**, **/entity/**, **/exception/**, **/*Application.java'
    }
}

tasks.named('sonarqube') {
    dependsOn test, jacocoTestReport
}

check.dependsOn jacocoTestCoverageVerification

dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-validation'
//    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    // Optional: For testing RabbitMQ
    testImplementation 'org.springframework.amqp:spring-rabbit-test'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
//    testImplementation 'org.springframework.security:spring-security-test'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    compileOnly("org.projectlombok:lombok:1.18.38")
    annotationProcessor("org.projectlombok:lombok:1.18.38")

    testCompileOnly("org.projectlombok:lombok:1.18.38")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.38")
}

//test {
//    useJUnitPlatform()
//}